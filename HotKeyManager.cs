using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace FastHotKeyForWPF.Generator
{
    [Generator]
    public class HotKeyManager : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var classDeclarations = AnalizeHelper.DefiningFilter(context);
            var compilationAndClasses = AnalizeHelper.GetValue(context, classDeclarations);
            context.RegisterSourceOutput(compilationAndClasses, GenerateSource);
        }
        private static void GenerateSource(SourceProductionContext context, (Compilation Compilation, ImmutableArray<ClassDeclarationSyntax> Classes) input)
        {
            var (compilation, classes) = input;

            HashSet<INamedTypeSymbol> processedSymbols = [];
            List<ClassDeclarationSyntax> uniqueClasses = [];

            foreach (var classDeclaration in classes)
            {
                SemanticModel model = compilation.GetSemanticModel(classDeclaration.SyntaxTree);
                var classSymbol = model.GetDeclaredSymbol(classDeclaration);
                if (classSymbol == null)
                    continue;

                if (!processedSymbols.Contains(classSymbol))
                {
                    processedSymbols.Add(classSymbol);
                    uniqueClasses.Add(classDeclaration);
                }
            }

            Dictionary<Tuple<INamedTypeSymbol, ClassDeclarationSyntax>, StringBuilder> generatedSources = [];

            foreach (var classDeclaration in uniqueClasses)
            {
                SemanticModel model = compilation.GetSemanticModel(classDeclaration.SyntaxTree);
                var classSymbol = model.GetDeclaredSymbol(classDeclaration);
                if (classSymbol == null || !classSymbol.GetMembers()
                        .Any(member => member.GetAttributes()
                        .Any(att => att.AttributeClass?.AllInterfaces
                        .Any(i => i.Name == "IHotKeyComponentAttribute") ?? false)))
                    continue;

                if (!generatedSources.TryGetValue(Tuple.Create(classSymbol, classDeclaration), out var sourceBuilder))
                {
                    var classRoslyn = new ClassRoslyn(classDeclaration, classSymbol);
                    sourceBuilder = new StringBuilder();
                    sourceBuilder.AppendLine($"// <auto-generated/>");

                    sourceBuilder.AppendLine(classRoslyn.GenerateUsing());
                    sourceBuilder.AppendLine(classRoslyn.GenerateNamespace());
                    sourceBuilder.AppendLine(classRoslyn.GeneratePartialClass());

                    sourceBuilder.AppendLine(classRoslyn.GenerateHorKeyComponent());

                    sourceBuilder.AppendLine(classRoslyn.GenerateEnd());
                    generatedSources[Tuple.Create(classSymbol, classDeclaration)] = sourceBuilder;
                }
            }

            foreach (var kvp in generatedSources)
            {
                context.AddSource($"{kvp.Key.Item1.ContainingNamespace.ToString().Replace('.', '_')}_{kvp.Key.Item2.Identifier.Text}_HotKeyComponent.g.cs", SourceText.From(kvp.Value.ToString(), Encoding.UTF8));
            }
        }
    }
}
